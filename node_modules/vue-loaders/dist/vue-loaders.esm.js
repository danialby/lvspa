import * as Vue from 'vue';

let InternalVue = Vue;

function shouldUseGlobalCreateElement() {
  return !!(
    InternalVue &&
    InternalVue.version &&
    /^[3-4]\./.test(InternalVue.version) &&
    InternalVue.h
  );
}

function useCreateElementResolver(component) {
  if (typeof component.render === 'function') {
    if (shouldUseGlobalCreateElement()) {
      const origin = component.render;
      component.render = function() {
        const argsArray = Array.prototype.slice.call(arguments);
        const args = typeof argsArray[0] === 'function'
          ? argsArray
          : [InternalVue.h].concat(argsArray);
        return origin.apply(this, args);
      };
    }
  }

  return component;
}

function formatLoaderName(fileName) {
  return 'VueLoaders' + fileName
    .split(/-|\.js/)
    .map(_ =>
      _.charAt(0)
        ? _.charAt(0).toUpperCase() + _.slice(1)
        : _
    )
    .join('');
}

function createSingleLoaderComponent(options) {
  const component = createComponentBase();

  component.name = formatLoaderName(options.name);
  component.render = createRender(options);

  useCreateElementResolver(component);

  return {
    originName: options.name,
    component,
    install(Vue) {
      Vue.component(this.component.name, this.component);
    }
  }
}

function createComponentBase() {
  return {
    props: {
      color: {
        type: String,
        default: '#ffffff'
      },
      scale: {
        type: [String, Number]
      }
    }
  };
}

function createRender(options) {
  const renderChildren = createChildrenRenderer(options.children);
  return function render(createElement) {
    return renderRoot(
      createElement,
      options.name,
      this.scale,
      renderChildren(createElement, this.color)
    );
  }
}

function createChildrenRenderer(children) {
  const args = createChildrenRenderArgs(children);
  return function renderChildren(createElement, color, renderArgs = args) {
    return renderArgs.map(_ => {
      const style = _[0];
      const nestedRenderArgs = _[1];
      const children = nestedRenderArgs
        ? renderChildren(createElement, color, nestedRenderArgs)
        : void 0;
      return renderChild(createElement, style(color), children);
    });
  }
}

function createChildrenRenderArgs(children) {
  const args = [];

  if (typeof children === 'number') {
    const colorStyleFactory = createColorFactory();
    let count = children > 0 ? children : 1;
    while (count--) {
      args.push([colorStyleFactory]);
    }
  } else if (Array.isArray(children)) {
    let currentArg;
    for (const child of children) {
      const colorStyleFactory = createColorFactory(child.color);
      let count = child.count > 0 ? child.count : 1;
      while (count--) {
        currentArg = [colorStyleFactory];
        if (child.children !== undefined) {
          currentArg.push(createChildrenRenderArgs(child.children));
        }
        args.push(currentArg);
      }
    }
  } else {
    throw new TypeError('Invalid children');
  }

  return args;
}

function renderRoot(createElement, name, scale, children) {
  return createElement(
    'div',
    {
      class: {
        'vue-loaders': true,
        [name]: true
      },
      style: {
        transform: scale !== void 0 ? `scale(${scale})` : void 0
      }
    },
    children
  );
}

function renderChild(createElement, style, children) {
  return createElement(
    'div',
    {
      style
    },
    children
  );
}

function createColorFactory(propsOrFn = 'background-color') {
  return color => {
    if (typeof propsOrFn === 'function') {
      return propsOrFn(color);
    }
    const props = Array.isArray(propsOrFn) ? propsOrFn : [propsOrFn];
    const style = {};
    for (const p of props) {
      style[p] = color;
    }
    return style;
  };
}

class LoadersPackage {
  constructor(loaders) {
    this.loaders = {};

    if (Array.isArray(loaders)) {
      for (const loader of loaders) {
        this.add(loader);
      }
    }
  }

  get(name) {
    return this.loaders[name];
  }

  add(loader) {
    this.loaders[loader.originName] = loader;
  }

  install(Vue) {
    for (const name in this.loaders) {
      if (this.loaders.hasOwnProperty(name)) {
        this.loaders[name].install(Vue);
      }
    }
  }
}

var ballbeat = createSingleLoaderComponent({
  name: 'ball-beat',
  children: 3
});

var ballgridbeat = createSingleLoaderComponent({
  name: 'ball-grid-beat',
  children: 9
});

var ballpulsesync = createSingleLoaderComponent({
  name: 'ball-pulse-sync',
  children: 3
});

var ballscaleripple = createSingleLoaderComponent({
  name: 'ball-scale-ripple',
  children: [
    {count: 1, color: 'border-color'}
  ]
});

var ballzigzagdeflect = createSingleLoaderComponent({
  name: 'ball-zig-zag-deflect',
  children: 2
});

var linescale = createSingleLoaderComponent({
  name: 'line-scale',
  children: 5
});

var linespinfadeloader = createSingleLoaderComponent({
  name: 'line-spin-fade-loader',
  children: 8
});

var triangleskewspin = createSingleLoaderComponent({
  name: 'triangle-skew-spin',
  children: [
    {count: 1, color: 'border-bottom-color'}
  ]
});

var ballcliprotate = createSingleLoaderComponent({
  name: 'ball-clip-rotate',
  children: [
    {
      count: 1,
      color: [
        'border-top-color',
        'border-left-color',
        'border-right-color'
      ]
    }
  ]
});

var ballgridpulse = createSingleLoaderComponent({
  name: 'ball-grid-pulse',
  children: 9
});

var ballrotate = createSingleLoaderComponent({
  name: 'ball-rotate',
  children: [
    {count: 1, children: 2}
  ]
});

var ballscaleripplemultiple = createSingleLoaderComponent({
  name: 'ball-scale-ripple-multiple',
  children: [
    {count: 3, color: 'border-color'}
  ]
});

var ballzigzag = createSingleLoaderComponent({
  name: 'ball-zig-zag',
  children: 2
});

var linescaleparty = createSingleLoaderComponent({
  name: 'line-scale-party',
  children: 4
});

var pacman = createSingleLoaderComponent({
  name: 'pacman',
  children: [
    {count: 2, color: ['border-top-color', 'border-left-color', 'border-bottom-color']},
    {count: 3}
  ]
});

var ballcliprotatemultiple = createSingleLoaderComponent({
  name: 'ball-clip-rotate-multiple',
  children: [
    {count: 1, color: ['border-right-color', 'border-left-color']},
    {count: 1, color: ['border-top-color', 'border-bottom-color']},
  ]
});

var ballpulse = createSingleLoaderComponent({
  name: 'ball-pulse',
  children: 3
});

var ballscale = createSingleLoaderComponent({
  name: 'ball-scale',
  children: 1
});

var ballspinfadeloader = createSingleLoaderComponent({
  name: 'ball-spin-fade-loader',
  children: 8
});

var cubetransition = createSingleLoaderComponent({
  name: 'cube-transition',
  children: 2
});

var linescalepulseout = createSingleLoaderComponent({
  name: 'line-scale-pulse-out',
  children: 5
});

var semicirclespin = createSingleLoaderComponent({
  name: 'semi-circle-spin',
  children: [
    {
      count: 1,
      color(color) {
        return {
          backgroundImage: `linear-gradient(transparent 0,transparent 70%, ${color} 30%, ${color} 100%)`
        };
      }
    }
  ]
});

var ballcliprotatepulse = createSingleLoaderComponent({
  name: 'ball-clip-rotate-pulse',
  children: [
    {count: 1},
    {count: 1, color: ['border-top-color', 'border-bottom-color']}
  ]
});

var ballpulserise = createSingleLoaderComponent({
  name: 'ball-pulse-rise',
  children: 5
});

var ballscalemultiple = createSingleLoaderComponent({
  name: 'ball-scale-multiple',
  children: 3
});

var balltrianglepath = createSingleLoaderComponent({
  name: 'ball-triangle-path',
  children: [
    {count: 3, color: 'border-color'}
  ]
});

var linescalepulseoutrapid = createSingleLoaderComponent({
  name: 'line-scale-pulse-out-rapid',
  children: 5
});

var squarespin = createSingleLoaderComponent({
  name: 'square-spin',
  children: 1
});

const loadersPackage = new LoadersPackage();

loadersPackage.add(ballbeat);
loadersPackage.add(ballgridbeat);
loadersPackage.add(ballpulsesync);
loadersPackage.add(ballscaleripple);
loadersPackage.add(ballzigzagdeflect);
loadersPackage.add(linescale);
loadersPackage.add(linespinfadeloader);
loadersPackage.add(triangleskewspin);
loadersPackage.add(ballcliprotate);
loadersPackage.add(ballgridpulse);
loadersPackage.add(ballrotate);
loadersPackage.add(ballscaleripplemultiple);
loadersPackage.add(ballzigzag);
loadersPackage.add(linescaleparty);
loadersPackage.add(pacman);
loadersPackage.add(ballcliprotatemultiple);
loadersPackage.add(ballpulse);
loadersPackage.add(ballscale);
loadersPackage.add(ballspinfadeloader);
loadersPackage.add(cubetransition);
loadersPackage.add(linescalepulseout);
loadersPackage.add(semicirclespin);
loadersPackage.add(ballcliprotatepulse);
loadersPackage.add(ballpulserise);
loadersPackage.add(ballscalemultiple);
loadersPackage.add(balltrianglepath);
loadersPackage.add(linescalepulseoutrapid);
loadersPackage.add(squarespin);

const VueLoadersComponent = {
  props: {
    name: {
      type: String,
      required: true
    },
    color: {
      type: String,
      default: '#ffffff'
    },
    scale: {
      type: [Number, String]
    }
  },
  render(createElement) {
    const loader = loadersPackage.get(this.name);

    if (loader) {
      const context = {
        color: this.color,
        scale: this.scale
      };

      return loader.component.render.call(context, createElement);
    }

    console.warn(
      'Unsupported loader name '
      + '"' + this.name + '".'
      + 'See https://github.com/Hokid/vue-loaders#loaders'
    );

    return null;
  }
};

useCreateElementResolver(VueLoadersComponent);

var index = {
  component: VueLoadersComponent,
  install(Vue) {
    Vue.component('vue-loaders', VueLoadersComponent);
    loadersPackage.install(Vue);
  }
};

export default index;
